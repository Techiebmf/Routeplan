{"ast":null,"code":"var _jsxFileName = \"/home/yatinndra/Documents/my-route/src/components/MapBox/index.js\";\nimport React from 'react';\n\nclass MyMapComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentWillMount() {\n    // Initialise some variables\n    var directionsService = new google.maps.DirectionsService();\n    var num, map, data;\n    var requestArray = [],\n        renderArray = []; // A JSON Array containing some people/routes and the destinations/stops\n\n    var jsonArray = {\n      \"Person 1\": [\"Torquay\", \"Exeter\"],\n      \"Person 2\": [\"Exmouth\", \"Okehampton\"],\n      \"Person 3\": [\"Penzance\", \"Falmouth\"] // 16 Standard Colours for navigation polylines\n\n    };\n    var colourArray = []; // Let's make an array of requests which will become individual polylines on the map.\n\n    function generateRequests() {\n      requestArray = [];\n\n      for (var route in jsonArray) {\n        // This now deals with one of the people / routes\n        // Somewhere to store the wayoints\n        var waypts = []; // 'start' and 'finish' will be the routes origin and destination\n\n        var start, finish; // lastpoint is used to ensure that duplicate waypoints are stripped\n\n        var lastpoint;\n        data = jsonArray[route];\n        limit = data.length;\n\n        for (var waypoint = 0; waypoint < limit; waypoint++) {\n          if (data[waypoint] === lastpoint) {\n            // Duplicate of of the last waypoint - don't bother\n            continue;\n          } // Prepare the lastpoint for the next loop\n\n\n          lastpoint = data[waypoint]; // Add this to waypoint to the array for making the request\n\n          waypts.push({\n            location: data[waypoint],\n            stopover: true\n          });\n        } // Grab the first waypoint for the 'start' location\n\n\n        start = waypts.shift().location; // Grab the last waypoint for use as a 'finish' location\n\n        finish = waypts.pop();\n\n        if (finish === undefined) {\n          // Unless there was no finish location for some reason?\n          finish = start;\n        } else {\n          finish = finish.location;\n        } // Let's create the Google Maps request object\n\n\n        var request = {\n          origin: start,\n          destination: finish,\n          waypoints: waypts,\n          travelMode: google.maps.TravelMode.DRIVING\n        }; // and save it in our requestArray\n\n        requestArray.push({\n          \"route\": route,\n          \"request\": request\n        });\n      }\n\n      processRequests();\n    }\n\n    function processRequests() {\n      // Counter to track request submission and process one at a time;\n      var i = 0; // Used to submit the request 'i'\n\n      function submitRequest() {\n        directionsService.route(requestArray[i].request, directionResults);\n      } // Used as callback for the above request for current 'i'\n\n\n      function directionResults(result, status) {\n        if (status == google.maps.DirectionsStatus.OK) {\n          // Create a unique DirectionsRenderer 'i'\n          renderArray[i] = new google.maps.DirectionsRenderer();\n          renderArray[i].setMap(map); // Some unique options from the colorArray so we can see the routes\n\n          renderArray[i].setOptions({\n            preserveViewport: true,\n            suppressInfoWindows: true,\n            polylineOptions: {\n              strokeWeight: 4,\n              strokeOpacity: 0.8,\n              strokeColor: colourArray[i]\n            },\n            markerOptions: {}\n          }); // Use this new renderer with the result\n\n          renderArray[i].setDirections(result); // and start the next request\n\n          nextRequest();\n        }\n      }\n\n      function nextRequest() {\n        // Increase the counter\n        i++; // Make sure we are still waiting for a request\n\n        if (i >= requestArray.length) {\n          // No more to do\n          return;\n        } // Submit another request\n\n\n        submitRequest();\n      } // This request is just to kick start the whole process\n\n\n      submitRequest();\n    } // Called Onload\n\n\n    function init() {\n      // Some basic map setup (from the API docs)\n      var mapOptions = {\n        center: new google.maps.LatLng(50.677965, -3.768841),\n        zoom: 8,\n        mapTypeControl: false,\n        streetViewControl: false,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      };\n      map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions); // Start the request making\n\n      generateRequests();\n    } // Get the ball rolling and trigger our init() on 'load'\n\n\n    google.maps.event.addDomListener(window, 'load', init);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"script\", {\n      src: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAgmtah4tami6GIlAtShxGX1BGYQLIICsM&libraries=places\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"map-canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MyMapComponent;","map":{"version":3,"sources":["/home/yatinndra/Documents/my-route/src/components/MapBox/index.js"],"names":["React","MyMapComponent","Component","constructor","props","componentWillMount","directionsService","google","maps","DirectionsService","num","map","data","requestArray","renderArray","jsonArray","colourArray","generateRequests","route","waypts","start","finish","lastpoint","limit","length","waypoint","push","location","stopover","shift","pop","undefined","request","origin","destination","waypoints","travelMode","TravelMode","DRIVING","processRequests","i","submitRequest","directionResults","result","status","DirectionsStatus","OK","DirectionsRenderer","setMap","setOptions","preserveViewport","suppressInfoWindows","polylineOptions","strokeWeight","strokeOpacity","strokeColor","markerOptions","setDirections","nextRequest","init","mapOptions","center","LatLng","zoom","mapTypeControl","streetViewControl","mapTypeId","MapTypeId","ROADMAP","Map","document","getElementById","event","addDomListener","window","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nclass MyMapComponent extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  componentWillMount(){\n    // Initialise some variables\n    var directionsService = new google.maps.DirectionsService();\n    var num, map, data;\n    var requestArray = [], renderArray = [];\n\n    // A JSON Array containing some people/routes and the destinations/stops\n    var jsonArray = {\n        \"Person 1\": [\"Torquay\", \"Exeter\"],\n        \"Person 2\": [\"Exmouth\", \"Okehampton\"],\n        \"Person 3\": [\"Penzance\", \"Falmouth\"]\n    }\n\n    // 16 Standard Colours for navigation polylines\n    var colourArray = [];\n\n    // Let's make an array of requests which will become individual polylines on the map.\n    function generateRequests(){\n\n        requestArray = [];\n\n        for (var route in jsonArray){\n            // This now deals with one of the people / routes\n\n            // Somewhere to store the wayoints\n            var waypts = [];\n\n            // 'start' and 'finish' will be the routes origin and destination\n            var start, finish\n\n            // lastpoint is used to ensure that duplicate waypoints are stripped\n            var lastpoint\n\n            data = jsonArray[route]\n\n            limit = data.length\n            for (var waypoint = 0; waypoint < limit; waypoint++) {\n                if (data[waypoint] === lastpoint){\n                    // Duplicate of of the last waypoint - don't bother\n                    continue;\n                }\n\n                // Prepare the lastpoint for the next loop\n                lastpoint = data[waypoint]\n\n                // Add this to waypoint to the array for making the request\n                waypts.push({\n                    location: data[waypoint],\n                    stopover: true\n                });\n            }\n\n            // Grab the first waypoint for the 'start' location\n            start = (waypts.shift()).location;\n            // Grab the last waypoint for use as a 'finish' location\n            finish = waypts.pop();\n            if(finish === undefined){\n                // Unless there was no finish location for some reason?\n                finish = start;\n            } else {\n                finish = finish.location;\n            }\n\n            // Let's create the Google Maps request object\n            var request = {\n                origin: start,\n                destination: finish,\n                waypoints: waypts,\n                travelMode: google.maps.TravelMode.DRIVING\n            };\n\n            // and save it in our requestArray\n            requestArray.push({\"route\": route, \"request\": request});\n        }\n\n        processRequests();\n    }\n\n    function processRequests(){\n\n        // Counter to track request submission and process one at a time;\n        var i = 0;\n\n        // Used to submit the request 'i'\n        function submitRequest(){\n            directionsService.route(requestArray[i].request, directionResults);\n        }\n\n        // Used as callback for the above request for current 'i'\n        function directionResults(result, status) {\n            if (status == google.maps.DirectionsStatus.OK) {\n\n                // Create a unique DirectionsRenderer 'i'\n                renderArray[i] = new google.maps.DirectionsRenderer();\n                renderArray[i].setMap(map);\n\n                // Some unique options from the colorArray so we can see the routes\n                renderArray[i].setOptions({\n                    preserveViewport: true,\n                    suppressInfoWindows: true,\n                    polylineOptions: {\n                        strokeWeight: 4,\n                        strokeOpacity: 0.8,\n                        strokeColor: colourArray[i]\n                    },\n                    markerOptions:{}\n                });\n\n                // Use this new renderer with the result\n                renderArray[i].setDirections(result);\n                // and start the next request\n                nextRequest();\n            }\n\n        }\n\n        function nextRequest(){\n            // Increase the counter\n            i++;\n            // Make sure we are still waiting for a request\n            if(i >= requestArray.length){\n                // No more to do\n                return;\n            }\n            // Submit another request\n            submitRequest();\n        }\n\n        // This request is just to kick start the whole process\n        submitRequest();\n    }\n\n    // Called Onload\n    function init() {\n\n        // Some basic map setup (from the API docs)\n        var mapOptions = {\n            center: new google.maps.LatLng(50.677965, -3.768841),\n            zoom: 8,\n            mapTypeControl: false,\n            streetViewControl: false,\n            mapTypeId: google.maps.MapTypeId.ROADMAP\n        };\n\n        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);\n\n        // Start the request making\n        generateRequests()\n    }\n\n    // Get the ball rolling and trigger our init() on 'load'\n    google.maps.event.addDomListener(window, 'load', init);\n  }\n\n\nrender() {\n  return (\n          <div>\n\n        <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAgmtah4tami6GIlAtShxGX1BGYQLIICsM&libraries=places\"></script>\n        <div id=\"map-canvas\"></div>\n\n\n\n          </div>\n      )\n    }\n}\nexport default MyMapComponent\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}